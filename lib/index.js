"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const e=require("./commands/install"),n=require("./commands/publish"),o=require("./commands/unpublish"),i=require("./config"),t=require("./log"),a=require("./commands/uninstall"),s=require("./commands/update"),r=require("./commands/list"),p=require("./common/Constants"),c=require("./commands/config"),g=require("./commands/init"),m=require("./commands/info"),d=require("commander"),l=require("./commands/ping"),u=new d.Command;u.configureHelp({sortSubcommands:!1,subcommandTerm:e=>e.name()}),u.name(p.Constants.PM).usage("[command] [options]").option("--registry <string>","specify the registry").option("--strict_ssl <boolean>","whether or not to do SSL key validation when making requests to the registry via https.").version(p.Constants.PmVersion,"-v, --version").allowExcessArguments(!1).allowUnknownOption(!1),u.command("config").arguments("[action] [key] [value]").usage("[options]").description(`Manage the ${p.Constants.PM} configuration files`).option("set <key> <value>","Writing Configuration Information").option("get <key>","Get configuration file information").option("delete <key>","Delete configuration file information").option("list, ls","Displaying all Configuration Information").option("-j, --json","Configuration information display in json format").action(c.configCmd),u.command("info").arguments("<pkg>").usage("[options] [<@group>/]<pkg>[@<version>]").description("This command shows data about a package and prints it to stdout.").action(m.infoCmd),u.command("init").description(`Create an ${p.Constants.MyPackageJson} file`).option("-y, --yes",`The default ${p.Constants.MyPackageJson} file is generated.`).option("-g, --group <string>","A package with group will be created").action(g.initCmd),u.command("install").alias("i").arguments("[pkg...]").usage("[options] [[<@group>/]<pkg>[@<version>] ...] | <folder> | <har file>").description("Install a package or all dependencies of the project in the current working directory").option("--save-dev","Package will appear in your devDependencies").option("--save-prod","Package will appear in your dependencies").option("--no-save",`Prevents saving to ${p.Constants.MyPackageJson}`).option("--no-link","Prevents linking to the directory of local package").action(e.installCmd),u.command("list").alias("ls").arguments("[<@group>/]<pkg>[@<version>]").description("List installed packages").option("-d, --depth <number>","The depth to go when traversing dependencies tree").option("-j, --json","Output in JSON format").action(r.listCmd),u.command("ping").description("Test the network connectivity").action(l.pingCmd),u.command("publish").arguments("<har_file>").description("Publishes a package to the registry so that it can be installed by name.").option("-t, --tag <p>",`the tag that is added to the package@version specified by the ${p.Constants.MyPackageJson} tag command, if no explicit tag is given.Sets tag 'latest' if no --tag specified`).option("--publish_registry <r>","always operates directly on the current registry, configurable from\nthe command line using `--publish_registry=url`").action(n.publishCmd),u.command("uninstall").alias("un").arguments("<pkg...>").usage("[options] [<@group>/]<pkg>...").description("Uninstall a package").option("--no-save",`Prevents saving to ${p.Constants.MyPackageJson}`).action(a.uninstallCmd),u.command("unpublish").arguments("[<@group>/]<pkg>[@<version>]").description("This removes a package version from the registry, deleting its entry and removing the harball.").option("-f, --force","Removes various protections against unfortunate side effects, common mistakes, unnecessary performance degradation, and malicious input").option("--publish_registry <r>","always operates directly on the current registry, configurable from\nthe command line using `--publish_registry=url`").action(o.unPublishCmd),u.command("update").alias("up").arguments("[pkg...]").usage("[options] [[<@group>/]<pkg> ...]").description("Update a package or all dependencies of the project in the current working directory").action(s.updateCmd),u.parseOptions(process.argv),i.config.load(u.opts()),(0,t.setupLog)(i.config.get(i.types.LOG_LEVEL)),u.parse();